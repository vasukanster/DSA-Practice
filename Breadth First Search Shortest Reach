/* Breadth First Search: Shortest Reach
link: https://www.hackerrank.com/challenges/bfsshortreach/problem
*/

#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'bfs' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. INTEGER m
 *  3. 2D_INTEGER_ARRAY edges
 *  4. INTEGER s
 */

// Function to perform BFS and find shortest distances from starting node
vector<int> bfs(int n, int m, vector<vector<int>> edges, int s) {
    // Create an adjacency list to represent the graph
    vector<int> adj[n]; 
    // Build the adjacency list from the edges
    for (auto it : edges) {
        // Subtract 1 to convert 1-indexed to 0-indexed
        adj[it[0] - 1].push_back(it[1] - 1); 
        adj[it[1] - 1].push_back(it[0] - 1); 
    } 

    // Initialize distance array with maximum values
    int dist[n];
    for (int i = 0; i < n; i++) 
        dist[i] = INT_MAX; // Set all distances to infinity

    dist[s - 1] = 0; // Distance to starting node is 0

    // Queue for BFS
    queue<int> q;
    q.push(s - 1); // Start BFS from the starting node

    // Perform BFS
    while (!q.empty()) {
        int node = q.front(); // Get the current node
        q.pop(); // Remove it from the queue

        // Explore all adjacent nodes
        for (auto it : adj[node]) {
            // If the distance to the current node + edge weight (6) is less than the known distance
            if (dist[node] + 6 < dist[it]) {
                dist[it] = 6 + dist[node]; // Update distance to the adjacent node
                q.push(it); // Add the adjacent node to the queue for further exploration
            }
        }
    }

    // Prepare the result vector
    vector<int> ans(n, -1); // Initialize with -1 (for unreachable nodes)
    for (int i = 0; i < n; i++) {
        if (dist[i] != INT_MAX) { // If the node is reachable
            ans[i] = dist[i]; // Store the distance in the answer vector
        }
    }

    // Remove the distance to the starting node (itself)
    ans.erase(ans.begin() + (s - 1));
    return ans; // Return the distances excluding the starting node
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string q_temp;
    getline(cin, q_temp);

    int q = stoi(ltrim(rtrim(q_temp)));

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string first_multiple_input_temp;
        getline(cin, first_multiple_input_temp);

        vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

        int n = stoi(first_multiple_input[0]);

        int m = stoi(first_multiple_input[1]);

        vector<vector<int>> edges(m);

        for (int i = 0; i < m; i++) {
            edges[i].resize(2);

            string edges_row_temp_temp;
            getline(cin, edges_row_temp_temp);

            vector<string> edges_row_temp = split(rtrim(edges_row_temp_temp));

            for (int j = 0; j < 2; j++) {
                int edges_row_item = stoi(edges_row_temp[j]);

                edges[i][j] = edges_row_item;
            }
        }

        string s_temp;
        getline(cin, s_temp);

        int s = stoi(ltrim(rtrim(s_temp)));

        vector<int> result = bfs(n, m, edges, s);

        for (size_t i = 0; i < result.size(); i++) {
            fout << result[i];

            if (i != result.size() - 1) {
                fout << " ";
            }
        }

        fout << "\n";
    }

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
